# -*- coding: utf-8 -*-
"""test and frontend.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sHjnSbLyEoNlzzbEetTMnszCROa5_eay
"""

import pickle
import numpy as np
import tensorflow
from tensorflow.keras.layers import GlobalMaxPooling2D
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.resnet50 import ResNet50,preprocess_input
import cv2 as cv

from sklearn.neighbors import NearestNeighbors
from  numpy.linalg import norm
feature_list=np.array(pickle.load(open("Embeddings_real.pkl","rb")))
filename=pickle.load(open("filename_real.pkl","rb"))
print(np.array(filename).shape)

model=ResNet50(weights="imagenet",include_top=False,input_shape=(224,224,3))
model.trainable=False
model=tensorflow.keras.Sequential([
    model,
    GlobalMaxPooling2D()
])

img=image.load_img("sample_dataset/sample/000057.jpg",target_size=(224,224))
img_array=image.img_to_array(img)
expaneded_img_array=np.expand_dims(img_array,axis=0)
preprocessed_img=preprocess_input(expaneded_img_array)
result=model.predict(preprocessed_img).flatten()
normalized_result=result/norm(result)



neighbors=NearestNeighbors(n_neighbors=6,algorithm="brute",metric="euclidean")
neighbors.fit(feature_list)
distances,indexes=neighbors.kneighbors([normalized_result])
print(indexes)

for file in indexes[0][1:6]:
  temp_img=cv.imread((filename[file]))
  cv.imshow(temp_img)

import gradio as gr
def recommend(input_img):
    # Convert from numpy to array suitable for ResNet
    img = cv.resize(input_img, (224,224))
    img_array = image.img_to_array(img)
    expanded_img_array = np.expand_dims(img_array, axis=0)
    preprocessed_img = preprocess_input(expanded_img_array)

    # Extract features
    result = model.predict(preprocessed_img).flatten()
    normalized_result = result / norm(result)

    # Find neighbors
    distances, indexes = neighbors.kneighbors([normalized_result])

    # Collect results (skip 0 because thatâ€™s the same image)
    results = []
    for idx in indexes[0][1:6]:
        results.append(filename[idx])

    return results





demo = gr.Interface(
    fn=recommend,
    inputs=gr.Image(type="numpy", label="Upload a  Image"),
    outputs=gr.Gallery(label="Similar Items", columns=2, height="auto"),
    title="Fashion Recommender",
    description="Upload an image of a Cloths and get visually similar recommendations."
)


demo.launch()



